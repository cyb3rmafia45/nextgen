// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A deepfake detection AI agent.
 *
 * - detectDeepfake - A function that handles the deepfake detection process.
 * - DetectDeepfakeInput - The input type for the detectDeepfake function.
 * - DetectDeepfakeOutput - The return type for the detectDeepfake function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectDeepfakeInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      'A photo to be checked for deepfake, as a data URI that must include a MIME type and use Base64 encoding. Expected format: data:<mimetype>;base64,<encoded_data>.'
    ),
});
export type DetectDeepfakeInput = z.infer<typeof DetectDeepfakeInputSchema>;

const DetectDeepfakeOutputSchema = z.object({
  isDeepfake: z.boolean().describe('Whether the image is likely a deepfake.'),
  confidence: z
    .number()
    .describe('The confidence level (0-1) of the deepfake detection.'),
  explanation: z
    .string()
    .describe('Explanation of why the image is classified as deepfake or not.'),
  identifiedModel: z.string().optional().describe('The AI model identified as being used to generate the image, if any (e.g., "Midjourney", "DALL-E", "Stable Diffusion", "Pica AI").')
});
export type DetectDeepfakeOutput = z.infer<typeof DetectDeepfakeOutputSchema>;

export async function detectDeepfake(input: DetectDeepfakeInput): Promise<DetectDeepfakeOutput> {
  return detectDeepfakeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'detectDeepfakePrompt',
  input: {schema: DetectDeepfakeInputSchema},
  output: {schema: DetectDeepfakeOutputSchema},
  prompt: `You are an expert in detecting deepfake, morphed, or AI-generated images. Analyze the provided image and determine if it has been manipulated.

  Photo: {{media url=photoDataUri}}

  Respond with a boolean value for isDeepfake, a confidence score between 0 and 1, and an explanation of your reasoning.
  
  **CRITICAL INSTRUCTION:** Pay very close attention to watermarks. The presence of a watermark from an AI image generation tool (e.g., "DALL-E", "Midjourney", "Stable Diffusion", "Pica AI", etc.) is definitive proof that the image is AI-generated. If you find such a watermark, you MUST set 'isDeepfake' to true and your confidence to a high value (e.g., 0.95 or higher).

  Consider the following factors:
  - Watermarks or logos from AI image generation tools. This is the most important factor.
  - Inconsistencies in lighting, shadows, and reflections.
  - Unnatural skin textures, hair, or facial features.
  - Blurring or artifacts at the edges of objects.
  - Signs of image morphing or face-swapping.
  
  If you determine the image is AI-generated, identify the model or tool used (e.g., Midjourney, DALL-E, Stable Diffusion, Pica AI) and include it in the 'identifiedModel' field.

  If the image appears authentic, explain why, but only after you have exhaustively checked for any signs of manipulation, especially watermarks.
  `,
});

const detectDeepfakeFlow = ai.defineFlow(
  {
    name: 'detectDeepfakeFlow',
    inputSchema: DetectDeepfakeInputSchema,
    outputSchema: DetectDeepfakeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
