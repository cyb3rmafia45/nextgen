// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A deepfake detection AI agent.
 *
 * - detectDeepfake - A function that handles the deepfake detection process.
 * - DetectDeepfakeInput - The input type for the detectDeepfake function.
 * - DetectDeepfakeOutput - The return type for the detectDeepfake function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectDeepfakeInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      'A photo to be checked for deepfake, as a data URI that must include a MIME type and use Base64 encoding. Expected format: data:<mimetype>;base64,<encoded_data>.'
    ),
});
export type DetectDeepfakeInput = z.infer<typeof DetectDeepfakeInputSchema>;

const DetectDeepfakeOutputSchema = z.object({
  isDeepfake: z.boolean().describe('Whether the image is likely a deepfake.'),
  confidence: z
    .number()
    .describe('The confidence level (0-1) of the deepfake detection.'),
  explanation: z
    .string()
    .describe('Explanation of why the image is classified as deepfake or not.'),
});
export type DetectDeepfakeOutput = z.infer<typeof DetectDeepfakeOutputSchema>;

export async function detectDeepfake(input: DetectDeepfakeInput): Promise<DetectDeepfakeOutput> {
  return detectDeepfakeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'detectDeepfakePrompt',
  input: {schema: DetectDeepfakeInputSchema},
  output: {schema: DetectDeepfakeOutputSchema},
  prompt: `You are an expert in detecting deepfake images. Analyze the provided image and determine if it is a deepfake.

  Photo: {{media url=photoDataUri}}

  Respond with a boolean value for isDeepfake, a confidence score between 0 and 1, and an explanation of your reasoning.
  Consider factors such as inconsistencies in lighting, unnatural textures, and unusual facial features.
  If the image is not a deepfake, provide an explanation as to why it is likely authentic.
  Be concise and specific in your explanation.
  `,
});

const detectDeepfakeFlow = ai.defineFlow(
  {
    name: 'detectDeepfakeFlow',
    inputSchema: DetectDeepfakeInputSchema,
    outputSchema: DetectDeepfakeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
